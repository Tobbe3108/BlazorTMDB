@page "/"
@using BlazorTMDB.Shared
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@*<h1>Weather forecast</h1>

    <p>This component demonstrates fetching data from the server.</p>

    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

    @if (weatherForecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in weatherForecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }*@

<div class="form-group">
    <label>
        User:
        <input @bind="_userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="_messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    //private HubConnection _hubConnection;
    //private IEnumerable<WeatherForecast> weatherForecasts;

    //protected override async Task OnInitializedAsync()
    //{
    //    _hubConnection = new HubConnectionBuilder()
    //        .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
    //        .Build();

    //    _hubConnection.On<IEnumerable<WeatherForecast>>("ReceiveData", data =>
    //    {
    //        weatherForecasts = data;
    //        StateHasChanged();
    //    });

    //    await _hubConnection.StartAsync();
    //}

    //Task Send() =>
    //    _hubConnection.SendAsync("GetData");

    //public bool IsConnected =>
    //    _hubConnection.State == HubConnectionState.Connected;

    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private string _userInput;
    private string _messageInput;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    Task Send() =>
        _hubConnection.SendAsync("SendMessage", _userInput, _messageInput);

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;
}